package com.anyihao.ayb.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.anyihao.ayb.db.entity.Server;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERVER".
*/
public class ServerDao extends AbstractDao<Server, Long> {

    public static final String TABLENAME = "SERVER";

    /**
     * Properties of entity Server.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ids = new Property(1, String.class, "ids", false, "IDS");
        public final static Property Serverid = new Property(2, String.class, "serverid", false, "SERVERID");
        public final static Property TaskLength = new Property(3, String.class, "taskLength", false, "TASK_LENGTH");
        public final static Property CrtTm = new Property(4, String.class, "crtTm", false, "CRT_TM");
    }


    public ServerDao(DaoConfig config) {
        super(config);
    }
    
    public ServerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERVER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDS\" TEXT," + // 1: ids
                "\"SERVERID\" TEXT," + // 2: serverid
                "\"TASK_LENGTH\" TEXT," + // 3: taskLength
                "\"CRT_TM\" TEXT);"); // 4: crtTm
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SERVER_IDS ON SERVER" +
                " (\"IDS\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Server entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(2, ids);
        }
 
        String serverid = entity.getServerid();
        if (serverid != null) {
            stmt.bindString(3, serverid);
        }
 
        String taskLength = entity.getTaskLength();
        if (taskLength != null) {
            stmt.bindString(4, taskLength);
        }
 
        String crtTm = entity.getCrtTm();
        if (crtTm != null) {
            stmt.bindString(5, crtTm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Server entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(2, ids);
        }
 
        String serverid = entity.getServerid();
        if (serverid != null) {
            stmt.bindString(3, serverid);
        }
 
        String taskLength = entity.getTaskLength();
        if (taskLength != null) {
            stmt.bindString(4, taskLength);
        }
 
        String crtTm = entity.getCrtTm();
        if (crtTm != null) {
            stmt.bindString(5, crtTm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Server readEntity(Cursor cursor, int offset) {
        Server entity = new Server( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ids
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serverid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taskLength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // crtTm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Server entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIds(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setServerid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaskLength(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCrtTm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Server entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Server entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Server entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
